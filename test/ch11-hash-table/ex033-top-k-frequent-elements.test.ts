import {
    topKFrequent,
    topKFrequent2,
} from '@/src/ch11-hash-table/ex033-top-k-frequent-elements'

describe('ex033-top-k-frequent-elements', () => {
    const cases: [[number[], number], number[]][] = [
        [
            [[1, 1, 1, 2, 2, 3], 2],
            [1, 2],
        ],
        [[[1], 1], [1]],
        [
            [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3],
            [1, 2, 3],
        ],
        [
            [[4, 4, 4, 4, 6, 6, 6, 2, 2, 2, 2, 2], 2],
            [2, 4],
        ],
        [
            [[1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6], 3],
            [5, 4, 3],
        ],
        [
            [[7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10], 4],
            [7, 8, 9, 10],
        ],
        [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1], [1]],
        [
            [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], 5],
            [1, 2, 3, 4, 5],
        ],
        [
            [
                [
                    1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2,
                    3, 4, 5, 6,
                ],
                6,
            ],
            [1, 2, 3, 4, 5, 6],
        ],
        [
            [[10000, -10000, 10000, -10000, 0, 0, 0, 10000], 2],
            [10000, 0],
        ],
        [
            [
                [
                    1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 4,
                    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                ],
                1,
            ],
            [4],
        ],
        [
            [[5, 5, 5, 5, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4], 2],
            [1, 5],
        ],
        [[[3, 0, 1, 0], 1], [0]],
        [
            [
                [
                    1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10,
                    10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
                ],
                5,
            ],
            [1, 2, 3, 4, 5],
        ],
        [
            [
                [
                    6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11,
                    12, 12, 12,
                ],
                3,
            ],
            [6, 7, 8],
        ],
        [
            [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10],
            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ],
        [
            [
                [
                    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4,
                    5, 5, 5, 5,
                ],
                4,
            ],
            [1, 2, 3, 4],
        ],
        [
            [
                [
                    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
                    18, 19, 20,
                ],
                5,
            ],
            [1, 2, 3, 4, 5],
        ],
        [
            [
                [
                    1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10,
                    10, 11, 11, 12, 12,
                ],
                3,
            ],
            [1, 2, 3],
        ],
        [
            [[1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 2],
            [1, 4],
        ],
    ]
    describe('topKFrequent', () => {
        test.each(cases)('%s -> %s'.slice(0, 30), ([input, k], expected) => {
            expect(topKFrequent(input, k)).toStrictEqual(expected)
        })
    })
    describe('topKFrequent, topKFrequent2 비교', () => {
        const performances: Record<string, number | string>[] = []
        test.each(cases)('%s -> %s'.slice(0, 30), ([input, k], expected) => {
            const startTime1 = performance.now()
            topKFrequent(input, k)
            const endTime1 = performance.now()
            const time1 = endTime1 - startTime1

            const startTime2 = performance.now()
            topKFrequent2(input, k)
            const endTime2 = performance.now()
            const time2 = endTime2 - startTime2

            performances.push({
                n: input.length,
                better: time1 < time2 ? '1' : '2',
                time1,
                time2,
            })
        })

        afterAll(() => {
            console.table(performances)
            /* O(n log n) > O(n) 이기 때문에 이론적으로는 대다수의 경우에 topKFrequent2가 더 빠르다. 
            다만 n log n은 Array.sort()로 인한 추정치이고 정렬로직은 내부적으로 최적화 되어 있을거라 실제로 측정해보면 첫 번째 방법이 더 빠른 경우도 일부 존재한다.
┌─────────┬────┬────────┬───────────────────────┬───────────────────────┐
│ (index) │ n  │ better │ time1                 │ time2                 │
├─────────┼────┼────────┼───────────────────────┼───────────────────────┤
│ 0       │ 6  │ '2'    │ 0.041333000000008724  │ 0.037833999999975276  │
│ 1       │ 1  │ '2'    │ 0.0005830000000059954 │ 0.0002919999999448919 │
│ 2       │ 20 │ '1'    │ 0.011999999999943611  │ 0.05141700000001492   │
│ 3       │ 12 │ '1'    │ 0.004333999999971638  │ 0.00483299999996234   │
│ 4       │ 16 │ '2'    │ 0.006709000000000742  │ 0.003500000000030923  │
│ 5       │ 12 │ '2'    │ 0.0038749999999936335 │ 0.002375000000029104  │
│ 6       │ 10 │ '2'    │ 0.0037919999999758147 │ 0.0029580000000350992 │
│ 7       │ 20 │ '2'    │ 0.004000000000019099  │ 0.003500000000030923  │
│ 8       │ 24 │ '2'    │ 0.005041000000005624  │ 0.003500000000030923  │
│ 9       │ 8  │ '2'    │ 0.005916999999953987  │ 0.002250000000003638  │
│ 10      │ 35 │ '2'    │ 0.004083000000036918  │ 0.003207999999972344  │
│ 11      │ 18 │ '2'    │ 0.003375000000005457  │ 0.0027499999999918145 │
│ 12      │ 4  │ '2'    │ 0.0030000000000427463 │ 0.0014160000000629225 │
│ 13      │ 31 │ '1'    │ 0.004042000000026746  │ 0.004207999999948697  │
│ 14      │ 21 │ '2'    │ 0.0030419999999367064 │ 0.0029999999999290594 │
│ 15      │ 10 │ '2'    │ 0.003125000000068212  │ 0.0028340000000071086 │
│ 16      │ 24 │ '2'    │ 0.0030000000000427463 │ 0.0027079999999841675 │
│ 17      │ 20 │ '1'    │ 0.0038749999999936335 │ 0.004666000000042914  │
│ 18      │ 24 │ '1'    │ 0.003249999999979991  │ 0.0037499999999681677 │
│ 19      │ 13 │ '2'    │ 0.002416999999923064  │ 0.002208999999993466  │
└─────────┴────┴────────┴───────────────────────┴───────────────────────┘
*/
        })
    })
})
